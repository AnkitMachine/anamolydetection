import matplotlib.pyplot as plt  # For visualization
from matplotlib.animation import FuncAnimation  # For real-time plotting
from collections import deque  # Efficient sliding window management
import random  # For generating random data
import numpy as np  # For statistical calculations

# Configure sliding window size and anomaly detection threshold
window_size = 50  # Number of recent points to display
threshold = 2.5  # Z-score threshold for anomaly detection

# Buffers to store incoming data and detected anomalies
data_stream = deque(maxlen=window_size)  # Store latest data points
anomalies = deque(maxlen=window_size)  # Store 1 for anomalies, 0 otherwise

# Initialize data stream with dummy values to fill the plot initially
data_stream.extend([0] * window_size)
anomalies.extend([0] * window_size)

# Set up the figure and axes for the real-time plot
fig, ax = plt.subplots()
line, = ax.plot([], [], label='Data Stream', color='blue', lw=2)  # Data stream line
anomaly_points, = ax.plot([], [], 'ro', label='Anomalies')  # Red dots for anomalies

# Configure plot limits and labels
ax.set_xlim(0, window_size - 1)
ax.set_ylim(0, 120)  # Adjust based on expected data range
ax.set_title('Real-Time Data Stream with Anomaly Detection')
ax.set_xlabel('Time Step')
ax.set_ylabel('Value')
ax.legend(loc='upper left')

class AnomalyDetector:
    """Class to detect anomalies using a sliding window with Z-Score."""
    def __init__(self, window_size=10, threshold=2.5):
        # Initialize window size and threshold
        self.data_window = deque(maxlen=window_size)
        self.threshold = threshold

    def detect_anomaly(self, new_value):
        """
        Detects if the new_value is an anomaly based on the Z-Score.
        Returns True if an anomaly is detected, False otherwise.
        """
        self.data_window.append(new_value)

        # Ensure we have enough data to perform anomaly detection
        if len(self.data_window) < self.data_window.maxlen:
            return False  # Not enough data yet

        # Calculate mean and standard deviation of the current window
        mean = np.mean(self.data_window)
        std_dev = np.std(self.data_window) or 1e-6  # Prevent division by zero

        # Calculate Z-score for the new value
        z_score = (new_value - mean) / std_dev

        # Anomaly is detected if the Z-score exceeds the threshold
        return abs(z_score) > self.threshold

# Create an instance of the anomaly detector
detector = AnomalyDetector(window_size=10, threshold=threshold)

def update(frame):
    """Generate new data and update the plot."""
    # Generate normal random data with occasional anomalies
    new_value = random.uniform(50, 60)  # Normal value range
    if random.random() < 0.1:  # 10% chance to introduce an anomaly
        new_value = random.uniform(100, 120)

    # Detect if the new value is an anomaly
    is_anomaly = detector.detect_anomaly(new_value)

    # Update the data buffers
    data_stream.append(new_value)
    anomalies.append(1 if is_anomaly else 0)

    # Update the plot lines
    line.set_data(range(len(data_stream)), list(data_stream))
    anomaly_indices = [i for i, a in enumerate(anomalies) if a == 1]
    anomaly_values = [data_stream[i] for i in anomaly_indices]
    anomaly_points.set_data(anomaly_indices, anomaly_values)

    return line, anomaly_points

# Configure animation to update the plot every 500 milliseconds
ani = FuncAnimation(fig, update, interval=500)

# Display the real-time plot
plt.show()
